import{_ as e,c as t,a as p,b as s,d as l,e as i,r as c,o}from"./app--JmYYJmN.js";const u={},r={href:"https://juejin.cn/post/6981728323051192357",target:"_blank",rel:"noopener noreferrer"};function d(k,n){const a=c("ExternalLinkIcon");return o(),t("div",null,[n[1]||(n[1]=p(`<h1 id="typescript知识点总结" tabindex="-1"><a class="header-anchor" href="#typescript知识点总结"><span>TypeScript知识点总结</span></a></h1><h2 id="ts基础概念" tabindex="-1"><a class="header-anchor" href="#ts基础概念"><span>TS基础概念</span></a></h2><h3 id="ts的优缺点-为什么要用ts" tabindex="-1"><a class="header-anchor" href="#ts的优缺点-为什么要用ts"><span>TS的优缺点，为什么要用TS</span></a></h3><details class="custom-container details"><summary class="custom-container-title">点击查看</summary><ul><li>代码的可读性和可维护性(类型提醒)</li><li>编译阶段就能发现很多错误，避免线上bug</li><li>增强了编辑器和IDE的功能，方便代码补全，接口提示等</li></ul><hr><ul><li>学习成本增加，接口，泛型等前端原本不常用的概念</li><li>前期会增加一些开发成本</li><li>一些js库和框架需要对ts做兼容，例如vue2对ts的支持就不好</li><li>ts的编译需要时间，项目大后打包编译时间耗费比js大</li></ul></details><h2 id="ts语法" tabindex="-1"><a class="header-anchor" href="#ts语法"><span>TS语法</span></a></h2><h3 id="ts里常见的类型" tabindex="-1"><a class="header-anchor" href="#ts里常见的类型"><span>TS里常见的类型</span></a></h3><details class="custom-container details"><summary class="custom-container-title">点击查看</summary><p>常用：</p><ul><li>boolean, number, string, array, enum, any, void<br> 不常用：</li><li>tuple null undefined never</li></ul></details><h3 id="interface和type的区别" tabindex="-1"><a class="header-anchor" href="#interface和type的区别"><span>interface和type的区别</span></a></h3><details class="custom-container details"><summary class="custom-container-title">点击查看</summary><ul><li>interface可以进行类型继承，type不行</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  skill<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  skinNum<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span> <span class="token comment">// say函数返回值为string</span></span>
<span class="line">  <span class="token punctuation">[</span>propname<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span> <span class="token comment">// 当前Hero可定义任意字符串类型的key</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 继承</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">littleSoldier</span> <span class="token keyword">extends</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">rush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 任意类型</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">IAnyObject</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Hero</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  age<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line">  skill<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  skinNum<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="数组类型及对象数组类型声明" tabindex="-1"><a class="header-anchor" href="#数组类型及对象数组类型声明"><span>数组类型及对象数组类型声明</span></a></h3><details class="custom-container details"><summary class="custom-container-title">点击查看代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">IItem</span> <span class="token punctuation">{</span></span>
<span class="line">  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  isGod<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 对象数组</span></span>
<span class="line"><span class="token keyword">const</span> objectArr<span class="token operator">:</span> IItem<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;俊劫&#39;</span><span class="token punctuation">,</span> isGod<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// or</span></span>
<span class="line"><span class="token keyword">const</span> objectArr<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>IItem<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;俊劫&#39;</span><span class="token punctuation">,</span> isGod<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 普通数组</span></span>
<span class="line"><span class="token keyword">const</span> numberArr<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> arr<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="tuple和array的区别" tabindex="-1"><a class="header-anchor" href="#tuple和array的区别"><span>tuple和array的区别</span></a></h3><details class="custom-container details"><summary class="custom-container-title">点击查看代码</summary><p>array仅需要类型对应，而tuple需要对应位置(下标)的类型以及数量全部对应才行</p><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// 数组 某个位置的值可以是注解中的任何一个</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">LOL</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;zed&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">&quot;darts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 元祖 每一项数据类型必须一致</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token constant">LOL</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;zed&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;darts&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="联合类型-和交叉类型" tabindex="-1"><a class="header-anchor" href="#联合类型-和交叉类型"><span>联合类型|和交叉类型&amp;</span></a></h3><details class="custom-container details"><summary class="custom-container-title">点击查看代码</summary><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// anjiao 某胖博主爱好</span></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Waiter</span> <span class="token punctuation">{</span></span>
<span class="line">  anjiao<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span></span>
<span class="line">  anjiao<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token function-variable function">skill</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 联合类型</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">judgeWho</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Waiter <span class="token operator">|</span> Teacher<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 交叉类型 </span></span>
<span class="line"><span class="token comment">// 同名类型会进行合并，同名基础类型属性的合并返回：never</span></span>
<span class="line"><span class="token comment">// 同名非基础类型属性可以正常合并</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">judgeWho</span><span class="token punctuation">(</span>jishi<span class="token operator">:</span> Waiter <span class="token operator">&amp;</span> Teacher<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="泛型-是什么" tabindex="-1"><a class="header-anchor" href="#泛型-是什么"><span>泛型&lt;&gt;是什么</span></a></h3><details class="custom-container details"><summary class="custom-container-title">点击查看代码</summary><ul><li>泛型&lt;&gt;表示一个暂不确定的类型，具体的类型在调用的时候传入，T仅仅是一个占位符</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token comment">// T 自定义名称</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">myFun</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>params<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> params<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token generic-function"><span class="token function">myFun</span> <span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;456&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 定义多个泛型</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">join</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>first<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> second<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>first<span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>second<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token generic-function"><span class="token function">join</span> <span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="断言是什么" tabindex="-1"><a class="header-anchor" href="#断言是什么"><span>断言是什么</span></a></h3><details class="custom-container details"><summary class="custom-container-title">点击查看代码</summary><ul><li>as或者&lt;&gt;表示断言，指定当前值的类型</li><li>jsx中必须用as</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">judgeWho</span><span class="token punctuation">(</span>animal<span class="token operator">:</span> Waiter <span class="token operator">|</span> Teacher<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>animal<span class="token punctuation">.</span>anjiao<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Teacher<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">(</span>animal <span class="token keyword">as</span> Waiter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="never和void的区别" tabindex="-1"><a class="header-anchor" href="#never和void的区别"><span>never和void的区别</span></a></h3><details class="custom-container details"><summary class="custom-container-title">点击查看</summary><ul><li>void表示没有任何类型，never表示永远不存在的值的类型</li></ul></details><h3 id="ts类里有哪些关键字" tabindex="-1"><a class="header-anchor" href="#ts类里有哪些关键字"><span>TS类里有哪些关键字</span></a></h3><details class="custom-container details"><summary class="custom-container-title">点击查看</summary><ul><li>public</li><li>private 类的外部不可用，继承也不行</li><li>protected 类的外部不可用，继承可以</li><li>public readOnly xxx 只读属性</li><li>static funcXXX 静态方法，不需要 new 就可以调用</li><li>abstract funcXXX 抽象类，所有子类都必须要实现 funcXXX</li></ul></details><h2 id="ts常见工具类型" tabindex="-1"><a class="header-anchor" href="#ts常见工具类型"><span>TS常见工具类型</span></a></h2><h3 id="readonly" tabindex="-1"><a class="header-anchor" href="#readonly"><span>Readonly&lt;&gt;</span></a></h3><details class="custom-container details"><summary class="custom-container-title">点击查看</summary><ul><li>将T中所有类型设为只读</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">JUserModel3</span> <span class="token operator">=</span> Readonly<span class="token operator">&lt;</span>UserModel<span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// =</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">JUserModel3</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">readonly</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">readonly</span> age<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">readonly</span> sex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="pick" tabindex="-1"><a class="header-anchor" href="#pick"><span>Pick&lt;&gt;</span></a></h3><details class="custom-container details"><summary class="custom-container-title">点击查看</summary><ul><li>在一个声明好的对象中，挑选一部分出来组成一个新的声明对象</li></ul><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span></span>
<span class="line">  title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  description<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">  done<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TodoBase</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&quot;title&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;done&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// =</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TodoBase</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    title<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span></span>
<span class="line">    done<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="nonnullable" tabindex="-1"><a class="header-anchor" href="#nonnullable"><span>NonNullable&lt;&gt;</span></a></h3><details class="custom-container details"><summary class="custom-container-title">点击查看</summary><ul><li>去掉T中的所有null和undefined类型</li></ul></details><p><em>该页面数据由本人编写+网上论坛整理所得</em></p><p><em>参考数据地址</em></p>`,32)),s("ul",null,[s("li",null,[s("a",r,[n[0]||(n[0]=l("一篇够用的TypeScript总结")),i(a)])])])])}const v=e(u,[["render",d],["__file","ts.html.vue"]]),b=JSON.parse('{"path":"/docs/knowledge/ts.html","title":"TypeScript知识点总结","lang":"en-US","frontmatter":{"title":"TypeScript知识点总结","date":"2022-02-08T00:00:00.000Z","tags":["TypeScript","面经"],"categories":["前端总结"]},"headers":[{"level":2,"title":"TS基础概念","slug":"ts基础概念","link":"#ts基础概念","children":[{"level":3,"title":"TS的优缺点，为什么要用TS","slug":"ts的优缺点-为什么要用ts","link":"#ts的优缺点-为什么要用ts","children":[]}]},{"level":2,"title":"TS语法","slug":"ts语法","link":"#ts语法","children":[{"level":3,"title":"TS里常见的类型","slug":"ts里常见的类型","link":"#ts里常见的类型","children":[]},{"level":3,"title":"interface和type的区别","slug":"interface和type的区别","link":"#interface和type的区别","children":[]},{"level":3,"title":"数组类型及对象数组类型声明","slug":"数组类型及对象数组类型声明","link":"#数组类型及对象数组类型声明","children":[]},{"level":3,"title":"tuple和array的区别","slug":"tuple和array的区别","link":"#tuple和array的区别","children":[]},{"level":3,"title":"联合类型|和交叉类型&","slug":"联合类型-和交叉类型","link":"#联合类型-和交叉类型","children":[]},{"level":3,"title":"泛型<>是什么","slug":"泛型-是什么","link":"#泛型-是什么","children":[]},{"level":3,"title":"断言是什么","slug":"断言是什么","link":"#断言是什么","children":[]},{"level":3,"title":"never和void的区别","slug":"never和void的区别","link":"#never和void的区别","children":[]},{"level":3,"title":"TS类里有哪些关键字","slug":"ts类里有哪些关键字","link":"#ts类里有哪些关键字","children":[]}]},{"level":2,"title":"TS常见工具类型","slug":"ts常见工具类型","link":"#ts常见工具类型","children":[{"level":3,"title":"Readonly<>","slug":"readonly","link":"#readonly","children":[]},{"level":3,"title":"Pick<>","slug":"pick","link":"#pick","children":[]},{"level":3,"title":"NonNullable<>","slug":"nonnullable","link":"#nonnullable","children":[]}]}],"git":{},"filePathRelative":"docs/knowledge/ts.md"}');export{v as comp,b as data};
