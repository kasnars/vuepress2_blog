import{_ as l,c as n,a as i,b as a,d as t,e as c,r as o,o as r}from"./app-ChX8Cwnj.js";const u={},d={href:"https://juejin.cn/post/6930897845369356295",target:"_blank",rel:"noopener noreferrer"};function p(m,e){const s=o("ExternalLinkIcon");return r(),n("div",null,[e[1]||(e[1]=i(`<h1 id="vue知识点总结" tabindex="-1"><a class="header-anchor" href="#vue知识点总结"><span>Vue知识点总结</span></a></h1><h2 id="vue概念相关" tabindex="-1"><a class="header-anchor" href="#vue概念相关"><span>vue概念相关</span></a></h2><h3 id="vue和react-angular的相同处" tabindex="-1"><a class="header-anchor" href="#vue和react-angular的相同处"><span>vue和react，angular的相同处</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>Vue 借鉴了 angular 的模板和数据绑定技术，又借鉴了 react 的组件化和虚拟 DOM 技术</li></ul></details><h3 id="谈谈对vue的理解" tabindex="-1"><a class="header-anchor" href="#谈谈对vue的理解"><span>谈谈对vue的理解</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>渐进式 JavaScript 框架、核心库加插件、动态创建用户界面（异步获取后台数据，数据展示在界面）</li><li>MVVM 模式；代码简洁体积小，运行效率高，适合移动PC端开发；本身只关注 UI （和 react 相似），可以轻松引入 Vue 插件或其他的第三方库进行开发</li></ul></details><h3 id="mvvm是什么" tabindex="-1"><a class="header-anchor" href="#mvvm是什么"><span>MVVM是什么</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>Model-View-ViewModel ， Model 表示数据模型层。 view 表示视图层， ViewModel 是 View 和 Model 层的桥梁，数据绑定到 viewModel 层并自动渲染到页面中，视图变化通知 viewModel 层更新数据。</li></ul></details><h2 id="vue基础" tabindex="-1"><a class="header-anchor" href="#vue基础"><span>vue基础</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>该部分为vue基础使用部分，如果不能回答出80%左右证明vue还不够熟悉</p></div><h3 id="vue有哪些生命周期" tabindex="-1"><a class="header-anchor" href="#vue有哪些生命周期"><span>vue有哪些生命周期</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>beforeCreate ：实例初始化之后，数据观测之前调用</li><li>created：实例创建完之后调用。实例完成：数据观测、属性和方法的运算、 watch/event 事件回调。无 $el .</li><li>beforeMount：在挂载之前调用，相关 render 函数首次被调用</li><li>mounted：数据挂载了并被新创建的vm.$el替换，并挂载到实例上去之后调用该钩子。</li><li>beforeUpdate：数据更新前调用，发生在虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。</li><li>updated：由于数据更改导致的虚拟DOM重新渲染和打补丁，在这之后会调用该钩子。</li><li>beforeDestroy：实例销毁前调用，实例仍然可用。</li><li>destroyed：实例销毁之后调用，调用后，Vue实例指示的所有东西都会解绑，所有事件监听器和所有子实例都会被移除</li></ul></details><h3 id="vue哪些生命周期常用-分别拿来干什么" tabindex="-1"><a class="header-anchor" href="#vue哪些生命周期常用-分别拿来干什么"><span>vue哪些生命周期常用，分别拿来干什么</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>created：实例已经创建完成，因为他是最早触发的，所以可以进行一些数据、资源的请求。(但一般不在这里发送网络请求，具体见下题)</li><li>mounted：实例已经挂载完成，可以进行一些DOM操作，网络请求等。</li><li>beforeUpdate：可以在这个钩子中进一步的更改状态，不会触发重渲染。</li><li>updated：可以执行依赖于DOM的操作，但是要避免更改状态，可能会导致更新无线循环！！！</li><li>destroyed：可以执行一些优化操作，清空计时器，解除绑定事件。</li></ul></details><h3 id="keep-alive-是什么" tabindex="-1"><a class="header-anchor" href="#keep-alive-是什么"><span>keep-alive 是什么</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。用作缓存当前组件。</li><li>activated keep-alive组件激活时调用，该钩子在服务器端渲染期间不被调用。</li><li>deactivated keep-alive组件停用时调用，该钩子在服务端渲染期间不被调用。</li></ul></details><h3 id="keep-alive对生命周期的影响" tabindex="-1"><a class="header-anchor" href="#keep-alive对生命周期的影响"><span>keep-alive对生命周期的影响</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>新增两个keep-alive自身的生命周期</p><ul><li>activated keep-alive组件激活时调用，该钩子在服务器端渲染期间不被调用。</li><li>deactivated keep-alive组件停用时调用，该钩子在服务端渲染期间不被调用。</li></ul></details><h3 id="网络请求放在哪个生命周期-为什么" tabindex="-1"><a class="header-anchor" href="#网络请求放在哪个生命周期-为什么"><span>网络请求放在哪个生命周期，为什么</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>一般放在 mounted 中，保证逻辑统一性，因为生命周期是同步执行的， ajax 是异步执行的。</li><li>但服务端渲染时 （ssr） 统一放在 created 中，因为服务端渲染不支持 mounted 方法</li></ul></details><h3 id="什么时候使用beforedestory" tabindex="-1"><a class="header-anchor" href="#什么时候使用beforedestory"><span>什么时候使用beforeDestory</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>当前页面使用 $on ，需要解绑事件。清楚定时器。解除事件绑定， scroll mousemove 。</li></ul></details><h3 id="父子组件生命周期调用顺序" tabindex="-1"><a class="header-anchor" href="#父子组件生命周期调用顺序"><span>父子组件生命周期调用顺序</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>渲染顺序：先父后子，完成顺序：先子后父</li><li>更新顺序：父更新导致子更新，子更新完成后父</li><li>销毁顺序：先父后子，完成顺序：先子后父</li><li><strong>熟悉koa的可以联想洋葱圈模型</strong></li></ul></details><h3 id="父子组件通信的方法" tabindex="-1"><a class="header-anchor" href="#父子组件通信的方法"><span>父子组件通信的方法</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>父亲提供数据通过属性 props传给儿子；儿子通过 $on 绑父亲的事件，再通过 $emit 触发自己的事件（发布订阅）</li><li>利用父子关系 $parent 、 $children</li><li>父组件提供数据，子组件注入。 provide 、 inject ，插件用得多</li><li>ref 获取组件实例，调用组件的属性、方法</li><li>跨组件通信 Event Bus （Vue.prototype.bus = new Vue）其实基于bus=newVue）其实基于on与$emit</li><li>vuex 状态管理实现通信</li></ul></details><h3 id="vue3中所新增的父子通信方法" tabindex="-1"><a class="header-anchor" href="#vue3中所新增的父子通信方法"><span>VUE3中所新增的父子通信方法</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>provide，inject</li><li>父组件用provide提供数据，子组件用inject接收</li></ul></details><h3 id="computed-和-watch对比" tabindex="-1"><a class="header-anchor" href="#computed-和-watch对比"><span>computed 和 watch对比</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>computed：默认computed也是一个watcher具备缓存，只有当依赖的数据变化时才会计算, 当数据没有变化时, 它会读取缓存数据。如果一个数据依赖于其他数据，使用 computed。</li><li>每次都需要执行函数。 watch 更适用于数据变化时的异步操作。如果需要在某个数据变化时做一些事情，使用watch。</li></ul></details><h3 id="v-if和v-show的区别" tabindex="-1"><a class="header-anchor" href="#v-if和v-show的区别"><span>v-if和v-show的区别</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>v-if 如果条件不成立不会渲染当前指令所在节点的DOM元素。</li><li>v-show 只是切换当前DOM的显示与隐藏(dom已经被渲染了)。</li><li>需要频繁切换的时候用v-show，很少切换或者仅仅做逻辑判断用v-for，减少没必要的重复渲染，提升性能</li></ul></details><h3 id="v-for和v-if为什么不能连用" tabindex="-1"><a class="header-anchor" href="#v-for和v-if为什么不能连用"><span>v-for和v-if为什么不能连用</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>v-for 会比 v-if 的优先级更高，连用的话会把 v-if 的每个元素都添加一下，造成性能问题。</li></ul><ul><li>tips:关于v-for与v-if谁的优先级更高网上众说纷纭，但是这两个优先级确实有区别</li></ul></details><h3 id="v-html-会导致哪些问题" tabindex="-1"><a class="header-anchor" href="#v-html-会导致哪些问题"><span>v-html 会导致哪些问题</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>XSS攻击</li><li>v-html 会替换标签内部的元素</li></ul></details><h3 id="为什么vue里的data是一个函数" tabindex="-1"><a class="header-anchor" href="#为什么vue里的data是一个函数"><span>为什么vue里的data是一个函数</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>避免组件中的数据互相影响。同一个组件被复用多次会创建多个实例，如果 data 是一个对象的话，这些实例用的是同一个构造函数。为了保证组件的数据独立，要求每个组件都必须通过 data 函数返回一个对象作为组件的状态。</p></details><h3 id="为什么要使用异步组件" tabindex="-1"><a class="header-anchor" href="#为什么要使用异步组件"><span>为什么要使用异步组件</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>节省打包出的结果，异步组件分开打包，采用jsonp的方式进行加载，有效解决文件过大的问题。</li><li>核心就是包组件定义变成一个函数，依赖 import（） 语法，可以实现文件的分割加载。</li></ul></details><h3 id="action和mutation的区别" tabindex="-1"><a class="header-anchor" href="#action和mutation的区别"><span>action和mutation的区别</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>mutation 是同步更新， $watch 严格模式下会报错</li><li>action 是异步操作，可以获取数据后调用 mutation 提交最终数据</li></ul></details><h3 id="插槽是什么" tabindex="-1"><a class="header-anchor" href="#插槽是什么"><span>插槽是什么</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>创建组件虚拟节点时，会将组件儿子的虚拟节点保存起来。当初始化组件时，通过插槽属性将儿子进行分类 {a:[vnode],b[vnode]}</li><li>渲染组件时会拿对应的 slot 属性的节点进行替换操作。（插槽的作用域为父组件）</li></ul></details><h3 id="作用域插槽是什么" tabindex="-1"><a class="header-anchor" href="#作用域插槽是什么"><span>作用域插槽是什么</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>作用域插槽在解析的时候不会作为组件的孩子节点。会解析成函数，当子组件渲染时，会调用此函数进行渲染。</li><li>普通插槽渲染的作用域是父组件，作用域插槽的渲染作用域是当前子组件。</li></ul></details><h3 id="vue中相同逻辑如何抽离" tabindex="-1"><a class="header-anchor" href="#vue中相同逻辑如何抽离"><span>vue中相同逻辑如何抽离</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>vue.mixin方法（vue2）</li><li>但是mixin并不好，有很多的副作用，比如重名冲突等</li></ul></details><h3 id="vue性能优化" tabindex="-1"><a class="header-anchor" href="#vue性能优化"><span>vue性能优化</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>四个方面：代码层面，用户体验层面，vue自身，浏览器层面</p><ol><li>代码 <ul><li>事件代理</li><li>keep-alive</li><li>拆分组件</li><li>key 保证唯一性</li><li>路由懒加载、异步组件</li><li>防抖节流</li></ul></li><li>用户 <ul><li>app-skeleton 骨架屏</li><li>pwa</li></ul></li><li>vue框架打包加载等 <ul><li>第三方模块按需导入（ babel-plugin-component ）</li><li>图片懒加载</li></ul></li><li>浏览器 <ul><li>seo优化，预渲染</li></ul></li></ol></details><h2 id="vue原理" tabindex="-1"><a class="header-anchor" href="#vue原理"><span>vue原理</span></a></h2><h3 id="vue2如何实现响应式数据-响应式数据原理" tabindex="-1"><a class="header-anchor" href="#vue2如何实现响应式数据-响应式数据原理"><span>vue2如何实现响应式数据(响应式数据原理)</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>利用Object.defineProperty 重新定义 data 中所有的属性， Object.defineProperty 可以使数据的获取与设置增加一个拦截的功能，拦截属性的获取，进行依赖收集。拦截属性的更新操作，进行通知。</li><li>具体过程(进阶):首先Vue使用 initData 初始化用户传入的参数，然后使用 new Observer 对数据进行观测，如果数据是一个对象类型就会调用 this.walk（value） 对对象进行处理，内部使用 defineeReactive 循环对象属性定义响应式变化，核心就是使用 Object.defineProperty 重新定义数据。</li></ul></details><h3 id="vue如何监听数组变化" tabindex="-1"><a class="header-anchor" href="#vue如何监听数组变化"><span>vue如何监听数组变化</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>是用来函数劫持的方式，重写了数组方法（pop 、 push 、 shift 、 unshift 、 splice 、 sort 、 reverse），具体呢就是更改了数组的原型，更改成自己的，用户调数组的一些方法的时候，走的就是自己的方法，然后通知视图去更新。</li><li>数组里每一项可能是对象，那么我就是会对数组的每一项进行观测，（且只有数组里的对象才能进行观测，观测过的也不会进行观测）</li><li>vue3：改用 proxy ，可直接监听对象数组的变化。</li></ul></details><h3 id="描述组件渲染和更新的过程" tabindex="-1"><a class="header-anchor" href="#描述组件渲染和更新的过程"><span>描述组件渲染和更新的过程</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>渲染组件时，会通过 vue.extend() 方法构建子组件的构造函数，并进行实例化。最终手动调用 $mount() 进行挂载。</li><li>更新组件时会进行 patchVnode 流程，核心就是 diff 算法。</li></ul></details><h3 id="vue事件绑定原理" tabindex="-1"><a class="header-anchor" href="#vue事件绑定原理"><span>vue事件绑定原理</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>原生 DOM 的绑定：Vue在创建真实DOM时会调用 createElm ，默认会调用 invokeCreateHooks 。会遍历当前平台下相对的属性处理代码，其中就有 updateDOMListeners 方法，内部会传入 add（） 方法</li><li>组件绑定事件，原生事件，自定义事件：组件绑定之间是通过Vue中自定义的 $on 方法实现的。</li></ul></details><h3 id="v-model的原理" tabindex="-1"><a class="header-anchor" href="#v-model的原理"><span>v-model的原理</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>v-model 可以看成是 value+input 方法的语法糖（组件）。原生的 v-model ，会根据标签的不同生成不同的事件与属性。解析一个指令来。</li><li>自己实现v-model：自己写 model 属性，里面放上 prop 和 event</li></ul></details><h3 id="vue渲染是异步还是同步-为什么" tabindex="-1"><a class="header-anchor" href="#vue渲染是异步还是同步-为什么"><span>vue渲染是异步还是同步，为什么？</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>vue是组件级更新，如果不采用异步更新的话，每次其中一部分改变都会导致整个大组件重新渲染，影响性能，所以vue会在本轮更新结束后异步更新视图，核心思想是nextTick</li><li>自己实现v-model：自己写 model 属性，里面放上 prop 和 event</li><li>异步更新原理(进阶): 通知 watcher进行更新， subs[i].update 依次调用 watcher 的 update ， queueWatcher 将watcher 去重放入队列， nextTick（ flushSchedulerQueue ）在下一tick中刷新watcher队列（异步）</li></ul></details><h3 id="谈谈-nexttick" tabindex="-1"><a class="header-anchor" href="#谈谈-nexttick"><span>谈谈$nextTick</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>用于异步获取dom节点 原因是因为vue异步渲染</li><li>异步方法，异步渲染最后一步，与JS事件循环联系紧密。主要使用了宏任务微任务（setTimeout、promise那些），定义了一个异步方法，多次调用nextTick会将方法存入队列，通过异步方法清空当前队列。</li></ul></details><h3 id="vuex-是什么-并且谈谈工作原理-有什么用" tabindex="-1"><a class="header-anchor" href="#vuex-是什么-并且谈谈工作原理-有什么用"><span>Vuex 是什么？并且谈谈工作原理？有什么用？</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>vuex是一个专为vue打造的状态管理模式</li><li>vuex组成： <ul><li>state：state是存储的单一状态，是存储的基本数据。</li><li>Getters：getters是store的计算属性，对state的加工，是派生出来的数据。</li><li>Mutations： mutations提交更改数据，使用store.commit方法更改state存储的状态。（mutations同步函数）。</li><li>Actions：actions像一个装饰器，提交mutation，而不是直接变更状态。（actions可以包含任何异步操作）。</li><li>Module： Module是store分割的模块，每个模块拥有自己的state、getters、mutations、actions。</li></ul></li><li>为什么要用vuex？： <ul><li>vuex，多组件共享状态。</li><li>多个视图依赖于同一状态。</li><li>来自不同视图的行为需要变更同一状态。</li></ul></li></ul></details><h3 id="如何从虚拟dom转化为真实dom" tabindex="-1"><a class="header-anchor" href="#如何从虚拟dom转化为真实dom"><span>如何从虚拟dom转化为真实dom</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>涉及到Vue中的模板编译原理，主要过程：</p><ol><li>将模板转换成 ast 树， ast 用对象来描述真实的JS语法（将真实DOM转换成虚拟DOM）</li><li>优化树</li><li>将 ast 树生成代码</li></ol></details><h3 id="什么是vnode-vnode如何描述dom结构" tabindex="-1"><a class="header-anchor" href="#什么是vnode-vnode如何描述dom结构"><span>什么是vnode？vnode如何描述dom结构</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>虚拟节点就是用一个对象来描述一个真实的DOM元素。首先将 template （真实DOM）先转成 ast ， ast 树通过 codegen 生成 render 函数， render 函数里的 _c 方法将它转为虚拟dom</p><ul><li>template -&gt; ast -&gt; render -&gt; dom</li></ul></details><h3 id="手写一段vnode-进阶" tabindex="-1"><a class="header-anchor" href="#手写一段vnode-进阶"><span>手写一段vnode(进阶)</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// real dom</span></span>
<span class="line"><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;container&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token comment">// 下面就描述了上面的dom</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// vnode</span></span>
<span class="line"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;container&#39;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// render</span></span>
<span class="line"><span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;container&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">_c</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h3 id="diff算法的时间复杂度" tabindex="-1"><a class="header-anchor" href="#diff算法的时间复杂度"><span>diff算法的时间复杂度</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>O(n)</li></ul><p>个树的完全 diff 算法是一个时间复杂度为 O(n*3） ，vue进行优化转化成 O(n) 。</p></details><h3 id="对vue中diff的理解以及运作方式" tabindex="-1"><a class="header-anchor" href="#对vue中diff的理解以及运作方式"><span>对vue中diff的理解以及运作方式</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><ul><li>最小量更新， key 很重要。这个可以是这个节点的唯一标识，告诉 diff 算法，在更改前后它们是同一个DOM节点 （v-for需要key的原因）</li><li>只有是同一个虚拟节点才会进行精细化比较，否则就是暴力删除旧的，插入新的。</li><li>只进行同层比较，不会进行跨层比较。</li></ul></details><h3 id="diff算法的优化策略-进阶" tabindex="-1"><a class="header-anchor" href="#diff算法的优化策略-进阶"><span>diff算法的优化策略(进阶)</span></a></h3><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>四种命中查找，四个指针</p><ul><li>旧前与新前（先比开头，后插入和删除节点的这种情况）</li><li>旧后与新后（比结尾，前插入或删除的情况）</li><li>旧前与新后（头与尾比，此种发生了，涉及移动节点，那么新前指向的节点，移动到旧后之后）</li><li>旧后与新前（尾与头比，此种发生了，涉及移动节点，那么新前指向的节点，移动到旧前之前）</li></ul></details><p><em>该页面数据由本人编写+网上论坛整理所得</em></p><p><em>参考数据地址</em></p>`,81)),a("ul",null,[a("li",null,[a("a",d,[e[0]||(e[0]=t("化身面试官出30+Vue面试题，超级干货（附答案）｜牛气冲天新年征文")),c(s)])])])])}const h=l(u,[["render",p],["__file","vue.html.vue"]]),k=JSON.parse('{"path":"/docs/knowledge/vue.html","title":"Vue知识点总结","lang":"en-US","frontmatter":{"title":"Vue知识点总结","date":"2022-02-08T00:00:00.000Z","tags":["Vue","面经"],"categories":["前端总结"]},"headers":[{"level":2,"title":"vue概念相关","slug":"vue概念相关","link":"#vue概念相关","children":[{"level":3,"title":"vue和react，angular的相同处","slug":"vue和react-angular的相同处","link":"#vue和react-angular的相同处","children":[]},{"level":3,"title":"谈谈对vue的理解","slug":"谈谈对vue的理解","link":"#谈谈对vue的理解","children":[]},{"level":3,"title":"MVVM是什么","slug":"mvvm是什么","link":"#mvvm是什么","children":[]}]},{"level":2,"title":"vue基础","slug":"vue基础","link":"#vue基础","children":[{"level":3,"title":"vue有哪些生命周期","slug":"vue有哪些生命周期","link":"#vue有哪些生命周期","children":[]},{"level":3,"title":"vue哪些生命周期常用，分别拿来干什么","slug":"vue哪些生命周期常用-分别拿来干什么","link":"#vue哪些生命周期常用-分别拿来干什么","children":[]},{"level":3,"title":"keep-alive 是什么","slug":"keep-alive-是什么","link":"#keep-alive-是什么","children":[]},{"level":3,"title":"keep-alive对生命周期的影响","slug":"keep-alive对生命周期的影响","link":"#keep-alive对生命周期的影响","children":[]},{"level":3,"title":"网络请求放在哪个生命周期，为什么","slug":"网络请求放在哪个生命周期-为什么","link":"#网络请求放在哪个生命周期-为什么","children":[]},{"level":3,"title":"什么时候使用beforeDestory","slug":"什么时候使用beforedestory","link":"#什么时候使用beforedestory","children":[]},{"level":3,"title":"父子组件生命周期调用顺序","slug":"父子组件生命周期调用顺序","link":"#父子组件生命周期调用顺序","children":[]},{"level":3,"title":"父子组件通信的方法","slug":"父子组件通信的方法","link":"#父子组件通信的方法","children":[]},{"level":3,"title":"VUE3中所新增的父子通信方法","slug":"vue3中所新增的父子通信方法","link":"#vue3中所新增的父子通信方法","children":[]},{"level":3,"title":"computed 和 watch对比","slug":"computed-和-watch对比","link":"#computed-和-watch对比","children":[]},{"level":3,"title":"v-if和v-show的区别","slug":"v-if和v-show的区别","link":"#v-if和v-show的区别","children":[]},{"level":3,"title":"v-for和v-if为什么不能连用","slug":"v-for和v-if为什么不能连用","link":"#v-for和v-if为什么不能连用","children":[]},{"level":3,"title":"v-html 会导致哪些问题","slug":"v-html-会导致哪些问题","link":"#v-html-会导致哪些问题","children":[]},{"level":3,"title":"为什么vue里的data是一个函数","slug":"为什么vue里的data是一个函数","link":"#为什么vue里的data是一个函数","children":[]},{"level":3,"title":"为什么要使用异步组件","slug":"为什么要使用异步组件","link":"#为什么要使用异步组件","children":[]},{"level":3,"title":"action和mutation的区别","slug":"action和mutation的区别","link":"#action和mutation的区别","children":[]},{"level":3,"title":"插槽是什么","slug":"插槽是什么","link":"#插槽是什么","children":[]},{"level":3,"title":"作用域插槽是什么","slug":"作用域插槽是什么","link":"#作用域插槽是什么","children":[]},{"level":3,"title":"vue中相同逻辑如何抽离","slug":"vue中相同逻辑如何抽离","link":"#vue中相同逻辑如何抽离","children":[]},{"level":3,"title":"vue性能优化","slug":"vue性能优化","link":"#vue性能优化","children":[]}]},{"level":2,"title":"vue原理","slug":"vue原理","link":"#vue原理","children":[{"level":3,"title":"vue2如何实现响应式数据(响应式数据原理)","slug":"vue2如何实现响应式数据-响应式数据原理","link":"#vue2如何实现响应式数据-响应式数据原理","children":[]},{"level":3,"title":"vue如何监听数组变化","slug":"vue如何监听数组变化","link":"#vue如何监听数组变化","children":[]},{"level":3,"title":"描述组件渲染和更新的过程","slug":"描述组件渲染和更新的过程","link":"#描述组件渲染和更新的过程","children":[]},{"level":3,"title":"vue事件绑定原理","slug":"vue事件绑定原理","link":"#vue事件绑定原理","children":[]},{"level":3,"title":"v-model的原理","slug":"v-model的原理","link":"#v-model的原理","children":[]},{"level":3,"title":"vue渲染是异步还是同步，为什么？","slug":"vue渲染是异步还是同步-为什么","link":"#vue渲染是异步还是同步-为什么","children":[]},{"level":3,"title":"谈谈$nextTick","slug":"谈谈-nexttick","link":"#谈谈-nexttick","children":[]},{"level":3,"title":"Vuex 是什么？并且谈谈工作原理？有什么用？","slug":"vuex-是什么-并且谈谈工作原理-有什么用","link":"#vuex-是什么-并且谈谈工作原理-有什么用","children":[]},{"level":3,"title":"如何从虚拟dom转化为真实dom","slug":"如何从虚拟dom转化为真实dom","link":"#如何从虚拟dom转化为真实dom","children":[]},{"level":3,"title":"什么是vnode？vnode如何描述dom结构","slug":"什么是vnode-vnode如何描述dom结构","link":"#什么是vnode-vnode如何描述dom结构","children":[]},{"level":3,"title":"手写一段vnode(进阶)","slug":"手写一段vnode-进阶","link":"#手写一段vnode-进阶","children":[]},{"level":3,"title":"diff算法的时间复杂度","slug":"diff算法的时间复杂度","link":"#diff算法的时间复杂度","children":[]},{"level":3,"title":"对vue中diff的理解以及运作方式","slug":"对vue中diff的理解以及运作方式","link":"#对vue中diff的理解以及运作方式","children":[]},{"level":3,"title":"diff算法的优化策略(进阶)","slug":"diff算法的优化策略-进阶","link":"#diff算法的优化策略-进阶","children":[]}]}],"git":{"createdTime":1740710037000,"updatedTime":1740710037000,"contributors":[{"name":"Kasnars","email":"kasnars@163.com","commits":1}]},"filePathRelative":"docs/knowledge/vue.md"}');export{h as comp,k as data};
